WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So, what's going on in this code?

00:00:03.000 --> 00:00:06.480
We have this list variable called lengths,

00:00:06.480 --> 00:00:08.894
and all of these numbers inside of it.

00:00:08.894 --> 00:00:13.369
Then we have this turtle setup code that's pretty familiar by now.

00:00:13.369 --> 00:00:18.789
Then we have for length in lengths. What's that?

00:00:18.789 --> 00:00:23.339
The key to understanding this line is knowing that length is

00:00:23.339 --> 00:00:28.085
a variable in a for loop can assign things to that variable.

00:00:28.085 --> 00:00:30.225
It doesn't use an equal sign,

00:00:30.225 --> 00:00:33.954
but it's doing something similar to assignment statements that you've seen before,

00:00:33.954 --> 00:00:40.004
such amy=turtle.Turtle() or pretty_color = "blue".

00:00:40.005 --> 00:00:44.570
Remember that the loop will run once for each of the items in the list.

00:00:44.570 --> 00:00:47.929
In this case, there are 10 items in the list.

00:00:47.929 --> 00:00:50.320
So the loop will run 10 times,

00:00:50.320 --> 00:00:52.414
and each time the loop runs,

00:00:52.414 --> 00:00:54.710
it will take one of the items in the list,

00:00:54.710 --> 00:00:58.035
and assign that item to the length variable.

00:00:58.034 --> 00:01:00.229
The first time through the loop,

00:01:00.229 --> 00:01:03.515
length gets assigned the first item in the list,

00:01:03.515 --> 00:01:05.540
which is the integer 10.

00:01:05.540 --> 00:01:07.560
The second time through the loop,

00:01:07.560 --> 00:01:09.644
length gets assigned 20.

00:01:09.644 --> 00:01:11.244
The third time through,

00:01:11.245 --> 00:01:13.995
it gets assigned 30, and so on.

00:01:13.995 --> 00:01:17.270
Again, you don't see any assignment statements here,

00:01:17.269 --> 00:01:22.284
but this is working very much as if we had a line like length = 10,

00:01:22.284 --> 00:01:24.280
and then length = 20,

00:01:24.280 --> 00:01:27.040
and then length = 30, and so on.

00:01:27.040 --> 00:01:30.290
We don't need to actually have these assignment statements

00:01:30.290 --> 00:01:34.310
because the assignment happens as part of the for loop.

00:01:34.310 --> 00:01:36.109
That's how for loops work,

00:01:36.109 --> 00:01:40.894
but how does this affect the shape of the turtle is drawing?

00:01:40.894 --> 00:01:47.594
Well, you may have noticed that the length variable is also being used in this line.

00:01:47.594 --> 00:01:49.590
Each time through the loop,

00:01:49.590 --> 00:01:52.460
this line does something slightly different.

00:01:52.459 --> 00:01:54.379
The first time through,

00:01:54.379 --> 00:01:57.125
length has been assigned a value of 10,

00:01:57.125 --> 00:02:02.254
so the line works exactly the same as if you had typed this line instead.

00:02:02.254 --> 00:02:04.524
But the second time through the loop,

00:02:04.525 --> 00:02:07.310
length gets assigned a value of 20,

00:02:07.310 --> 00:02:11.280
so the line now works as if it were dizzy.forward(20).

00:02:12.240 --> 00:02:16.020
This continues for each number in the list.

00:02:16.020 --> 00:02:19.090
The result is that each time through the loop,

00:02:19.090 --> 00:02:21.909
dizzy moves forward by a different amount.

00:02:21.909 --> 00:02:24.734
Here's a way to talk about this sort of loop.

00:02:24.735 --> 00:02:29.409
We say that it's looping over the list which is to say,

00:02:29.408 --> 00:02:33.125
it's doing something for each item in the list.

00:02:33.125 --> 00:02:35.620
Something to be careful of though,

00:02:35.620 --> 00:02:39.795
the first line of a for loop always ends with a colon.

00:02:39.794 --> 00:02:44.569
The lines inside the loop are always indented by the same number of spaces.

00:02:44.569 --> 00:02:46.305
If you leave off the colon,

00:02:46.305 --> 00:02:48.444
or have mismatched indentation,

00:02:48.444 --> 00:02:51.849
Python will give you a syntax error on the affected line,

00:02:51.849 --> 00:02:54.000
so be sure to watch your syntax

