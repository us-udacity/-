WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.194
你也许能够想象 设计机器人需要大量工作

00:00:03.194 --> 00:00:07.040
即使是虚拟机器人 而不是真实的机器人也如此

00:00:07.040 --> 00:00:11.080
为了使我们能够在 Python 中使用 turtle 机器人

00:00:11.080 --> 00:00:14.705
开发者必须编写大量关于 turtle 的代码

00:00:14.705 --> 00:00:16.339
这些就是 turtle 代码

00:00:16.339 --> 00:00:19.425
这些代码使我们能够创建 turtle 对象

00:00:19.425 --> 00:00:24.269
并通过简单的指令使其能够在屏幕上绘制图形

00:00:24.269 --> 00:00:27.140
这段代码很长

00:00:27.140 --> 00:00:31.214
你在编程过程中经常会见到大段代码

00:00:31.214 --> 00:00:35.509
有人会在文件中编写一些有用的代码并分享该文件

00:00:35.509 --> 00:00:40.019
使所有人都能使用这些代码 无需自己重复编写相同的代码

00:00:40.020 --> 00:00:44.895
在 Python 中 这些有用代码集合称为模块

00:00:44.895 --> 00:00:48.555
在我们的演示中 我们使用了 turtle 模块

00:00:48.554 --> 00:00:51.740
Python 中还有很多其他实用的模块

00:00:51.740 --> 00:00:53.390
例如 math 模块

00:00:53.390 --> 00:00:56.645
其中包含大量执行计算的代码

00:00:56.645 --> 00:01:00.109
模块有很多种

00:01:00.109 --> 00:01:04.939
如果将所有这些文件都放到我们编写的每个程序中

00:01:04.939 --> 00:01:07.579
将会大大降低程序的运行速度

00:01:07.579 --> 00:01:10.370
因此 当我们要在程序中使用特定的模块时

00:01:10.370 --> 00:01:13.310
我们会告诉 Python 该模块

00:01:13.310 --> 00:01:16.125
方法是导入模块

00:01:16.125 --> 00:01:19.939
这就是第一行代码 import turtle 的作用

00:01:19.939 --> 00:01:23.709
我们通过这种方式告诉 Python 我们想要在此程序中

00:01:23.709 --> 00:01:29.144
使用 turtle 执行操作 因此需要访问 turtle 模块中的代码

00:01:29.144 --> 00:01:31.744
导入 turtle 模块后

00:01:31.745 --> 00:01:33.579
就好像所有这些代码都是程序本身的一部分一样

00:01:33.579 --> 00:01:37.405
我们可以访问这些代码并对 turtle 执行操作

00:01:37.405 --> 00:01:44.435
例如 再看一眼这行代码 amy = turtle.Turtle()

00:01:44.435 --> 00:01:47.710
记住 turtle.Turtle 会在计算机内存中

00:01:47.709 --> 00:01:50.964
创建一个新的 turtle 对象

00:01:50.965 --> 00:01:54.745
注意开头是我们要使用的模块的名称

00:01:54.745 --> 00:01:57.490
然后是点

00:01:57.489 --> 00:02:00.379
这个点告诉 Python 在 turtle 模块中查找

00:02:00.379 --> 00:02:05.170
叫做 turtle 的代码并运行该代码

00:02:05.170 --> 00:02:10.444
表示运行 turtle 模块中的 turtle 代码

00:02:10.444 --> 00:02:13.939
正是这段代码创建了新的 turtle 对象

00:02:13.939 --> 00:02:16.759
创建好 turtle 对象后

00:02:16.759 --> 00:02:22.699
我们可以向该 turtle 发出指令 例如 amy.forward(100) 或 amy.right(90)

00:02:22.699 --> 00:02:26.284
对于这几行代码需要注意的重要事项是

00:02:26.284 --> 00:02:30.384
它们实际上引用了隐藏在其他位置的代码

00:02:30.384 --> 00:02:35.894
具体而言 这几行代码引用的是 turtle 模块内的代码

00:02:35.895 --> 00:02:38.480
在该模块中

00:02:38.479 --> 00:02:41.239
有一个代码块包含了让 turtle 向前移动的指令

00:02:41.240 --> 00:02:45.405
另一个代码块包含了让 turtle 右转的指令

00:02:45.405 --> 00:02:49.879
这些代码块具有让 turtle 执行不同操作的指令

00:02:49.879 --> 00:02:54.639
但是它们本身不执行任何操作

00:02:54.639 --> 00:02:57.284
只是等着被使用

00:02:57.284 --> 00:03:01.384
当我们运行像 amy.forward(100) 这样的代码行时

00:03:01.384 --> 00:03:04.579
我们告诉 Python 查找名称为 forward 的这个代码块

00:03:04.580 --> 00:03:07.790
并运行该代码块

00:03:07.789 --> 00:03:13.810
在 Python 中 这些代码块称为方法

00:03:13.810 --> 00:03:20.375
我们将 amy.forward(100) 和 amy.right(90) 等称为方法调用

00:03:20.375 --> 00:03:21.814
运行这两行代码时

00:03:21.814 --> 00:03:26.340
我们在调用 turtle 模块中的 forward 和 right 方法

00:03:26.340 --> 00:03:31.150
amy.color("yellow") 是另一个方法调用示例

00:03:31.150 --> 00:03:36.025
当然 它调用的是 turtle 模块中叫做 color 的代码块

00:03:36.025 --> 00:03:40.390
注意 这些方法调用始终具有方法名称

00:03:40.389 --> 00:03:43.209
然后是小括号 我们可以在括号里放入输入

00:03:43.210 --> 00:03:46.730
Python 在运行方法时将使用这些输入

00:03:46.729 --> 00:03:48.859
当我们调用 forward 方法时

00:03:48.860 --> 00:03:52.600
它需要知道我们希望 turtle 向前移动多少个像素

00:03:52.599 --> 00:03:57.739
我们使用数字 100 表示向前移动的像素数量

00:03:57.740 --> 00:03:59.515
当我们调用 right 方法时

00:03:59.514 --> 00:04:03.504
需要提供一个输入 从而知道应该转多少度

00:04:03.504 --> 00:04:05.539
调用 color 方法时

00:04:05.539 --> 00:04:07.949
需要 yellow 或 blue 这样的输入

00:04:07.949 --> 00:04:10.964
如果目前你觉得方法很神秘

00:04:10.965 --> 00:04:14.450
别担心 稍后我们还会讲解这一概念

00:04:14.449 --> 00:04:17.164
暂时只需知道

00:04:17.165 --> 00:04:20.090
某个其他位置隐藏了一段代码

00:04:20.089 --> 00:04:23.419
这段代码有个名称 并且现在我们可以使用

00:04:23.420 --> 00:04:28.520
amy.forward(100) 或 amy.right(90) 这样的代码行运行这个代码块

