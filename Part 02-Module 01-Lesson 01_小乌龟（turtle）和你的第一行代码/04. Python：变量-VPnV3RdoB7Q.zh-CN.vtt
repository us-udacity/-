WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.799
这是我们刚刚看到的一段代码

00:00:02.799 --> 00:00:04.500
如果你对这段代码进行实验

00:00:04.500 --> 00:00:08.730
应该会发现 如果只在一行更改 turtle 的名称

00:00:08.730 --> 00:00:10.384
程序无法运行

00:00:10.384 --> 00:00:13.285
当你尝试运行时 会遇到错误消息

00:00:13.285 --> 00:00:16.085
但是如果在所有这些行更改名称

00:00:16.085 --> 00:00:17.435
程序就能运行

00:00:17.434 --> 00:00:20.549
为了更好地理解为何会发生这种情况

00:00:20.550 --> 00:00:25.410
我们可以仔细研究这行代码：george = turtle.Turtle()

00:00:25.410 --> 00:00:28.695
一般而言 我们可以将这行代码看做

00:00:28.695 --> 00:00:32.159
创建一个 turtle 并设定一个名称

00:00:32.159 --> 00:00:35.804
右侧部分 turtle.Turtle()

00:00:35.804 --> 00:00:39.390
是创建新 turtle 的部分

00:00:39.390 --> 00:00:42.310
左侧部分 george 表示 turtle 的名称是什么

00:00:42.310 --> 00:00:46.300
但是我们说这行代码是在创建一个 turtle 到底什么意思？

00:00:46.299 --> 00:00:50.869
Python 具有大量关于 turtle 工作原理的信息

00:00:50.869 --> 00:00:53.000
如何让这个虚拟机器人以不同的方式移动

00:00:53.000 --> 00:00:55.795
并在屏幕上绘制图形

00:00:55.795 --> 00:00:59.240
为了在我们的程序中使用 turtle

00:00:59.240 --> 00:01:02.770
我们首先需要在计算机内存中放置这个数据的副本

00:01:02.770 --> 00:01:06.125
当我们运行代码 turtle.Turtle() 时

00:01:06.125 --> 00:01:08.269
Python 会在计算机内存中找到空闲空间

00:01:08.269 --> 00:01:12.655
并将这个 turtle 的数据放在此空间内

00:01:12.655 --> 00:01:15.320
我们让此 turtle 做好准备

00:01:15.319 --> 00:01:18.299
每当我们需要 turtle 绘制图形时 都可以使用此数据

00:01:18.299 --> 00:01:21.230
现在我们在计算机内存的这个特定位置

00:01:21.230 --> 00:01:25.425
拥有了虚拟 turtle 机器人所需的数据

00:01:25.424 --> 00:01:27.950
顺便提下 你会听到我们将此数据称为 turtle 数据对象

00:01:27.950 --> 00:01:32.000
或简称为 turtle 对象

00:01:32.000 --> 00:01:35.454
如果我们想使用此 turtle 对象

00:01:35.454 --> 00:01:37.484
我们不能只将数据放到内存中

00:01:37.484 --> 00:01:40.650
还需要某种方式来描述该 turtle

00:01:40.650 --> 00:01:43.000
向其发出指令 等等

00:01:43.000 --> 00:01:45.950
我们需要以某种方式引用该 turtle

00:01:45.950 --> 00:01:48.469
因此我们为其分配了一个名称 例如 George

00:01:48.469 --> 00:01:53.329
将 turtle 数据对象放到内存中并指定名称后

00:01:53.329 --> 00:01:57.000
每当我们想要对 turtle 执行操作时 都可以使用该名称

00:01:57.000 --> 00:02:01.569
例如 如果希望叫做 George 的 turtle 向前移动或转向

00:02:01.569 --> 00:02:08.144
我们可以使用 george.forward(100) 和 george.right(90) 等代码

00:02:08.145 --> 00:02:12.770
如果我们一开始将此数据对象称为 George

00:02:12.770 --> 00:02:17.420
但是之后尝试用另一个名称 Amy 来引用它 是不可行的

00:02:17.419 --> 00:02:22.174
我们的代码尚未将 Amy 与内存中的任何特定数据相关联

00:02:22.175 --> 00:02:24.770
我们几乎可以使用任何名称

00:02:24.770 --> 00:02:30.530
但是必须保持一致 否则 Python 不知道我们引用的是什么数据

00:02:30.530 --> 00:02:35.313
这个概念并非仅适用于命名 turtle

00:02:35.313 --> 00:02:38.359
一般概念是我们将某些数据放到计算机内存中

00:02:38.360 --> 00:02:40.525
然后将此数据与某个名称相关联

00:02:40.525 --> 00:02:43.490
这样就可以在代码中使用该名称

00:02:43.490 --> 00:02:48.399
当我们将代码中的名称与计算机内存中的数据关联之后

00:02:48.399 --> 00:02:50.500
我们可以用一个特定的术语描述这种情况

00:02:50.500 --> 00:02:52.110
称为变量

00:02:52.110 --> 00:02:56.580
称为变量是因为 这种关联可以变化

00:02:56.580 --> 00:02:59.800
也就是说 我们可以更改变量引用的数据

00:02:59.800 --> 00:03:04.150
我们可以指定这个变量引用的是内存中某个位置的某些数据

00:03:04.150 --> 00:03:06.849
但是稍后在程序当中 我们可以更改该变量

00:03:06.849 --> 00:03:10.125
使其引用内存中其他位置的其他数据

00:03:10.125 --> 00:03:14.219
变量就好像是一个有标签的盒子

00:03:14.219 --> 00:03:17.889
我们可以用该标签引用盒子中的任何物品

00:03:17.889 --> 00:03:22.099
但是之后 我们可以撕掉该标签 并贴到另一个盒子上

00:03:22.099 --> 00:03:27.079
为了告诉计算机特定的数据对象应该有特定的名称标签

00:03:27.080 --> 00:03:31.070
我们会用到 george = turtle.Turtle 这样的代码行

00:03:31.069 --> 00:03:35.824
注意 这行代码分成等号左右的两部分

00:03:35.824 --> 00:03:38.609
右侧是 turtle.Turtle()

00:03:38.610 --> 00:03:40.380
它会创建一个新的 turtle

00:03:40.379 --> 00:03:45.125
左侧是 george 表示变量的名称

00:03:45.125 --> 00:03:48.655
中间的是等号

00:03:48.655 --> 00:03:52.900
告诉 Python 将右侧的事物与左侧的名称相关联

00:03:52.900 --> 00:03:56.789
顺便提下 当我们将名称与内存中的数据关联时

00:03:56.789 --> 00:03:59.609
我们将这一过程称为赋值

00:03:59.610 --> 00:04:03.960
我们为右侧代码中的数据分配一个左侧的名称

00:04:03.960 --> 00:04:09.314
等号称为赋值运算符

00:04:09.314 --> 00:04:11.789
我们可以将 george = turtle.Turtle() 这样的代码行

00:04:11.789 --> 00:04:13.859
称为赋值语句

00:04:13.860 --> 00:04:18.250
注意赋值语句右侧的代码始终先发生

00:04:18.250 --> 00:04:24.279
首先创建一个新的 turtle 然后为该 turtle 分配名称 George

