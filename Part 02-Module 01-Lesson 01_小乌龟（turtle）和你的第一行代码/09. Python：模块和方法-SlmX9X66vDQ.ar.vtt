WEBVTT
Kind: captions
Language: ar

00:00:00.467 --> 00:00:03.837
كما قد تتخيل، تصميم روبوت
يتطلب مجهوداً كبيراَ،

00:00:03.937 --> 00:00:07.307
حتى لو روبوتاً افتراضياً وليس حقيقيًاً.

00:00:07.407 --> 00:00:11.178
لتمكيننا من استخدام
السلاحف الآلية في Python،

00:00:11.278 --> 00:00:14.915
كان على أحد ما كتابة مجموعة
من التعليمات البرمجية عن السلاحف،

00:00:15.015 --> 00:00:16.517
وها هي.

00:00:16.617 --> 00:00:20.687
هذا الكود يمكننا من إنشاء كائن سلحفاة،

00:00:20.787 --> 00:00:24.458
ويمكننا من استخدام تعليمات بسيطة
لجعله يرسم أشياء على الشاشة.

00:00:24.558 --> 00:00:27.528
هذه كمية كود كبيرة!

00:00:27.628 --> 00:00:31.298
هذا في الواقع شيء
سترى الكثير منه في البرمجة.

00:00:31.398 --> 00:00:34.101
سيكتب شخص ما كود مفيد في ملف،

00:00:34.201 --> 00:00:36.837
ثم ينشر الملف ليتمكن الجميع من استخدامه،

00:00:36.937 --> 00:00:40.140
دون أن يضطر أحد
إلى كتابة الكود نفسه بنفسه.

00:00:40.240 --> 00:00:45.045
في Python، مجموعات الكود المفيدة هذه
تُسمى Modules أي الوحدات النمطية.

00:00:45.145 --> 00:00:48.849
في هذه الحالة،
استخدمنا وحدة turtle النمطية.

00:00:48.949 --> 00:00:51.585
يوجد أنواع كثيرة
من الوحدات النمطية الأخرى المفيدة.

00:00:51.685 --> 00:00:54.354
مثل وحدة "math" للرياضيات
والتي يحتوى على مجموعة من الكود

00:00:54.454 --> 00:00:56.857
لمساعدتك في القيام بحسابات مفيدة.

00:00:56.957 --> 00:00:59.993
يوجد الكثير من الوحدات النمطية المتاحة.

00:01:00.093 --> 00:01:04.798
ولو وضعنا كل ملفات الكود تلك
في كل برنامج نكتبه،

00:01:04.898 --> 00:01:07.701
فإن ذلك سيبطئ تلك البرامج كثيراً.

00:01:07.801 --> 00:01:11.238
بدلاً من ذلك، نخبر Python
حين تكون هناك وحدة نمطية محددة

00:01:11.338 --> 00:01:13.440
نريد استخدامها في برنامجنا.

00:01:13.540 --> 00:01:16.243
نفعل ذلك عن طريق استيراد الوحدة النمطية.

00:01:16.343 --> 00:01:20.080
هذا هو الغرض من السطر الأول
من الكود: import turtle.

00:01:20.180 --> 00:01:24.618
هكذا نخبر Python بأننا نريد أن نفعل أشياء
باستخدام السلاحف في هذا البرنامج.

00:01:24.718 --> 00:01:29.356
وأننا لذلك نحتاج إلى الوصول
إلى الكود الموجودة في وحدة turtle.

00:01:29.456 --> 00:01:34.628
ما إن نستورد وحدة turtle،
سيبدو كل الكود وكأنه جزء من برنامجنا،

00:01:34.728 --> 00:01:37.564
ويمكننا استخدامه لنفعل ما نريد بالسلاحف.

00:01:37.664 --> 00:01:41.268
على سبيل المثال،
دعونا نلقِ نظرة أخرى على هذا السطر.

00:01:41.368 --> 00:01:44.671
Amy = turtle.Turtle()

00:01:44.771 --> 00:01:51.144
تذكر أن "turtle.Turtle" هو الكود الذي
ينشئ كائن سلحفاة جديد في ذاكرة الكمبيوتر.

00:01:51.245 --> 00:01:57.618
لاحظ أنها تبدأ باسم الوحدة التي نريد
استخدامها، "turtle"، ثم هناك نقطة.

00:01:57.718 --> 00:02:01.355
هذه النقطة هي أمر لـPython
بالبحث داخل الوحدة النمطية turtle

00:02:01.455 --> 00:02:05.325
عن كود اسمه "turtle" ثم تشغيل ذلك الكود.

00:02:05.425 --> 00:02:10.597
إذن فهي تقول، شغّل الكود
الذي في داخل وحدة turtle النمطية،

00:02:10.697 --> 00:02:14.034
وذلك الكود هو الذي ينشئ
كائن السلحفاة الجديد.

00:02:14.134 --> 00:02:16.637
بعد إنشاء نموذج السلحفاة الجديد،

00:02:16.737 --> 00:02:22.976
يمكننا إعطاء تعليمات لتلك السلحفاة، مثل:
(100)amy.forward أو (90)amy.right.

00:02:23.076 --> 00:02:25.779
الشيء المهم الذي يجب أن تفهمه
عن هذه السطور،

00:02:25.879 --> 00:02:30.384
هو أنها في الواقع تشير إلى كود
مخفي في مكان آخر.

00:02:30.484 --> 00:02:36.156
تحديداً، هذه السطور تشير إلى كود
موجودة داخل وحدة turtle النمطية.

00:02:36.256 --> 00:02:38.192
في تلك الوحدة هناك كتلة كود،

00:02:38.292 --> 00:02:41.395
تحوي تعليمات
لجعل السلحفاة تتحرك إلى الأمام.

00:02:41.495 --> 00:02:45.532
وهناك كتلة أخرى من الكود
تحوي تعليمات لجعلها تستدير يميناً.

00:02:45.632 --> 00:02:47.634
إذن، لدينا كتل الكود هذه

00:02:47.734 --> 00:02:51.338
التي تحمل تعليمات
تجعل السلحفاة تفعل أشياء مختلفة.

00:02:51.438 --> 00:02:54.675
لكن كتل الكود هذه لا تفعل شيئاً
من تلقاء نفسها،

00:02:54.775 --> 00:02:57.477
بل إنها تقبع هناك بانتظار أن تُستخدم.

00:02:57.578 --> 00:03:01.748
عندما نشغل سطراً من الكود
مثل "(100)amy.forward"،

00:03:01.849 --> 00:03:08.121
فنحن نأمر Python بالبحث عن كتلة الكود
التي تحمل الاسم "forward" وتشغيلها.

00:03:08.222 --> 00:03:12.659
في Python ، تُسمى
كتل الكود هذه "methods" أي أساليب.

00:03:12.759 --> 00:03:16.496
ونشير إلى السطور مثل "(100)amy.forward"

00:03:16.597 --> 00:03:20.534
و"(90)amy.right" باسم استدعاءات الأساليب.

00:03:20.634 --> 00:03:24.271
عندما نشغل هذا السطور، فنحن نستدعي
الأسلوبين "forward" و"right"،

00:03:24.371 --> 00:03:26.640
الموجودين داخل الوحدة turtle.

00:03:26.740 --> 00:03:30.777
"amy.color("yellow")"
هو مثال آخر على استدعاء الأساليب.

00:03:30.878 --> 00:03:36.316
وهو بالطبع يستدعي كتلة الكود
المسماة "color" داخل وحدة turtle.

00:03:36.416 --> 00:03:39.753
لاحظ أن استدعاءات الأساليب هذه
تحوي دائماَ اسم الأسلوب

00:03:39.853 --> 00:03:44.124
متبوعاً بقوسين، ويمكننا كتابة
بعض المدخلات داخل القوسين،

00:03:44.224 --> 00:03:46.894
وهي التي سيستخدمها Python
عندما يشغل الأسلوب.

00:03:46.994 --> 00:03:48.896
وهكذا عندما نستدعي الأسلوب "forward"،

00:03:48.996 --> 00:03:52.633
فإنه بحاجة إلى معرفة
كم سنجعل السلحفاة تتقدم إلى الأمام.

00:03:52.733 --> 00:03:58.038
نحن هنا نستخدم الرقم 100 لنخبرها
بعدد البيكسلات التي ستتقدم بها للأمام.

00:03:58.138 --> 00:03:59.406
عندما نستدعي الأسلوب "right"،

00:03:59.506 --> 00:04:03.744
فإنه يحتاج إلى مدخلات توضح
درجة استدارة السلحفاة.

00:04:03.844 --> 00:04:05.412
وعندما نستدعي الأسلوب "color"،

00:04:05.512 --> 00:04:08.081
فهو يحتاج إلى مدخلات مثل أصفر أو أزرق.

00:04:08.182 --> 00:04:11.752
إذا بدت الأساليب غامضة قليلًا
في هذه المرحلة، لا تقلق،

00:04:11.852 --> 00:04:14.588
سنتناول هذا المفهوم مرة أخرى في وقت لاحق.

00:04:14.688 --> 00:04:19.793
حالياً، يكفي أن نفهم أن لدينا كتلة كود
مخفية في مكان آخر،

00:04:19.893 --> 00:04:23.864
وأن ذلك الكود له اسم،
وأن بإمكاننا تشغيله باستخدام أسطر مثل:

00:04:23.964 --> 00:04:28.335
(100)amy.forward
أو (90)amy.right

