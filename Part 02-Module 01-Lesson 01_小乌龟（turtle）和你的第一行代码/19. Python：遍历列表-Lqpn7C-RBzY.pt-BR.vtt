WEBVTT
Kind: captions
Language: pt-BR

00:00:00.330 --> 00:00:03.131
O que está acontecendo
com este código?

00:00:03.164 --> 00:00:06.303
Temos esta lista de variáveis
chamada "lengths"

00:00:06.336 --> 00:00:09.093
e todos estes números
dentro dela.

00:00:09.126 --> 00:00:13.399
E temos este código de organização
da tartaruga que já é familiar.

00:00:13.432 --> 00:00:17.459
E então temos
for lengths in lengths:.

00:00:17.492 --> 00:00:19.155
O que é isso?

00:00:19.188 --> 00:00:21.428
A chave para entender
esta linha

00:00:21.461 --> 00:00:24.368
é saber que length
é uma variável,

00:00:24.401 --> 00:00:28.240
e um loop for pode atribuir
coisas a essa variável.

00:00:28.273 --> 00:00:30.071
Ela não usa um sinal de igual,

00:00:30.104 --> 00:00:32.894
mas faz algo parecido
com as instruções de atribuição

00:00:32.927 --> 00:00:34.169
que vimos antes,

00:00:34.202 --> 00:00:36.938
como amy = turtle.Turtle()

00:00:36.971 --> 00:00:39.699
ou pretty_color = "blue".

00:00:39.732 --> 00:00:44.732
Lembre-se de que o loop vai rodar
uma vez para cada item da lista.

00:00:44.765 --> 00:00:47.824
Neste caso,
há 10 itens na lista,

00:00:47.857 --> 00:00:50.455
então o loop vai rodar
10 vezes.

00:00:50.488 --> 00:00:52.183
E a cada vez que o loop rodar,

00:00:52.216 --> 00:00:54.504
ele vai pegar
um dos itens da lista

00:00:54.537 --> 00:00:58.318
e atribuir o item
à variável length.

00:00:58.351 --> 00:01:00.179
No primeiro loop,

00:01:00.212 --> 00:01:03.613
o primeiro item da lista
é atribuído à length,

00:01:03.646 --> 00:01:05.798
o número 10.

00:01:05.831 --> 00:01:07.421
No segundo loop,

00:01:07.454 --> 00:01:09.734
20 é atribuído à length.

00:01:09.767 --> 00:01:11.174
No terceiro loop,

00:01:11.207 --> 00:01:14.211
30 é atribuído à ela,
e assim por diante.

00:01:14.244 --> 00:01:17.115
Novamente, não temos nenhuma
instrução de atribuição aqui,

00:01:17.148 --> 00:01:20.486
mas isso funciona
como se tivéssemos uma linha

00:01:20.519 --> 00:01:22.282
como length =10,

00:01:22.315 --> 00:01:24.305
e length = 20,

00:01:24.338 --> 00:01:27.199
e length = 30,
e assim por diante.

00:01:27.232 --> 00:01:30.198
Não precisamos ter
estas instruções de atribuição

00:01:30.231 --> 00:01:34.134
porque a atribuição acontece
como parte do loop for.

00:01:34.167 --> 00:01:36.377
É assim que o loop for
funciona,

00:01:36.410 --> 00:01:41.010
mas como isso afeta a forma
que a tartaruga desenha?

00:01:41.043 --> 00:01:42.931
Bom, você deve ter percebido

00:01:42.964 --> 00:01:47.696
que a variável length também está
sendo usada nesta linha.

00:01:47.729 --> 00:01:49.494
Em cada loop,

00:01:49.527 --> 00:01:52.704
esta linha faz algo
ligeiramente diferente.

00:01:52.737 --> 00:01:54.346
Na primeira vez,

00:01:54.379 --> 00:01:57.219
o valor de 10 foi atribuído
à length,

00:01:57.252 --> 00:01:59.334
então a linha funciona
exatamente

00:01:59.367 --> 00:02:02.598
como se tivéssemos
digitado esta linha.

00:02:02.631 --> 00:02:04.487
Mas no segundo loop,

00:02:04.520 --> 00:02:07.134
o valor de 20 é atribuído
à length,

00:02:07.167 --> 00:02:12.831
então a linha agora funciona
como se fosse dizzy.forward(20).

00:02:12.864 --> 00:02:16.292
Isto continua
para cada número da lista.

00:02:16.325 --> 00:02:18.854
O resultado é que,
em cada loop,

00:02:18.887 --> 00:02:21.938
dizzy se move para frente
com um valor diferente.

00:02:21.971 --> 00:02:24.719
Aqui está um jeito de falar
sobre este tipo de loop.

00:02:24.752 --> 00:02:29.201
Dizemos que ele faz um looping
pela lista, ou seja,

00:02:29.234 --> 00:02:32.975
ele faz algo
para cada item da lista.

00:02:33.008 --> 00:02:35.351
Mas é preciso tomar cuidado
com uma coisa:

00:02:35.384 --> 00:02:39.784
a primeira linha de um loop for
sempre termina com dois pontos.

00:02:39.817 --> 00:02:42.868
As linhas dentro do loop
sempre são endentadas

00:02:42.901 --> 00:02:44.779
com o mesmo número de espaços.

00:02:44.812 --> 00:02:46.337
Se não usar os dois pontos

00:02:46.370 --> 00:02:48.451
ou se a endentação
estiver inadequada,

00:02:48.484 --> 00:02:51.621
o Python acusará
um erro de sintaxe na linha afetada,

00:02:51.654 --> 00:02:53.440
então preste atenção
na sua sintaxe.

