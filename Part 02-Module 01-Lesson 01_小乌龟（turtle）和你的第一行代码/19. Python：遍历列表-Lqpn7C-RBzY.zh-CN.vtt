WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.000
这段代码的作用是什么？

00:00:03.000 --> 00:00:06.480
这是一个叫做 lengths 的列表变量

00:00:06.480 --> 00:00:08.894
其中包含大量数字

00:00:08.894 --> 00:00:13.369
然后是这个我们已经很熟悉的 turtle 设置代码

00:00:13.369 --> 00:00:18.789
接下来是 for length in lengths 这是什么意思？

00:00:18.789 --> 00:00:23.339
理解这行代码的关键是知道 length 是个变量

00:00:23.339 --> 00:00:28.085
在 for 循环中可以向该变量赋值

00:00:28.085 --> 00:00:30.225
它没有使用等号

00:00:30.225 --> 00:00:33.954
但是和之前见过的赋值语句相似

00:00:33.954 --> 00:00:40.004
例如 amy=turtle.Turtle() 或 pretty_color = "blue"

00:00:40.005 --> 00:00:44.570
注意 循环将针对列表中的每项运行一次

00:00:44.570 --> 00:00:47.929
在此视频中 列表中有 10 项

00:00:47.929 --> 00:00:50.320
因此循环将运行 10 次

00:00:50.320 --> 00:00:52.414
每次循环运行时

00:00:52.414 --> 00:00:54.710
它都会采用列表中的一项

00:00:54.710 --> 00:00:58.035
并将该项赋值给 length 变量

00:00:58.034 --> 00:01:00.229
第一次循环时

00:01:00.229 --> 00:01:03.515
将列表中的第一项赋值给 length

00:01:03.515 --> 00:01:05.540
即整数 10

00:01:05.540 --> 00:01:07.560
第二次循环时

00:01:07.560 --> 00:01:09.644
将 20 赋值给 length

00:01:09.644 --> 00:01:11.244
第三次循环时

00:01:11.245 --> 00:01:13.995
将 30 赋值给它 等等

00:01:13.995 --> 00:01:17.270
同样 你没有在这里看到任何赋值语句

00:01:17.269 --> 00:01:22.284
但是几乎就好像有代码行 length = 10

00:01:22.284 --> 00:01:24.280
然后是 length = 20

00:01:24.280 --> 00:01:27.040
然后是 length = 30 等等

00:01:27.040 --> 00:01:30.290
我们不需要实际使用这些赋值语句

00:01:30.290 --> 00:01:34.310
因为 for 循环本身就会这样赋值

00:01:34.310 --> 00:01:36.109
这是 for 循环的工作原理

00:01:36.109 --> 00:01:40.894
但是这会如何影响到 turtle 绘制图形的形状呢？

00:01:40.894 --> 00:01:47.594
你可能已经注意到 这行也使用了变量 length

00:01:47.594 --> 00:01:49.590
每次循环时

00:01:49.590 --> 00:01:52.460
这行都执行稍微不同的操作

00:01:52.459 --> 00:01:54.379
第一次循环时

00:01:54.379 --> 00:01:57.125
将值 10 赋值给 length

00:01:57.125 --> 00:02:02.254
因此这行的效果和输入这样的代码行完全一样

00:02:02.254 --> 00:02:04.524
但是第二次循环时

00:02:04.525 --> 00:02:07.310
将值 20 赋值给 length

00:02:07.310 --> 00:02:11.280
因此这行现在就好像是 dizzy.forward(20)

00:02:12.240 --> 00:02:16.020
针对列表中的每个数字持续这样操作

00:02:16.020 --> 00:02:19.090
结果是每次循环时

00:02:19.090 --> 00:02:21.909
dizzy 都以不同的数量向前移动

00:02:21.909 --> 00:02:24.734
可以这样描述这种循环

00:02:24.735 --> 00:02:29.409
我们说它在遍历列表

00:02:29.408 --> 00:02:33.125
也就是说 对列表中的每项执行某个操作

00:02:33.125 --> 00:02:35.620
但要注意的是

00:02:35.620 --> 00:02:39.795
for 循环的第一行始终以冒号结尾

00:02:39.794 --> 00:02:44.569
循环中的代码行始终以相同数量的空格缩进

00:02:44.569 --> 00:02:46.305
如果你丢失了冒号

00:02:46.305 --> 00:02:48.444
或者缩进不对

00:02:48.444 --> 00:02:51.849
Python 将在受影响的代码行上显示语法错误

00:02:51.849 --> 00:02:54.000
一定要注意语法

