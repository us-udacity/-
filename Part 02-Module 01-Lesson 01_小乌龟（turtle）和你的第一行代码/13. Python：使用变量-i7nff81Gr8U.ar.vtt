WEBVTT
Kind: captions
Language: ar

00:00:00.467 --> 00:00:03.036
إليكم الكود الذي كنا ننظر إليه للتو.

00:00:03.136 --> 00:00:06.974
إن تلاعبتم بالكود، ينبغي أن تكونوا
قد اكتشفتم أنكم إذا غيرتم اسم السلحفاة

00:00:07.074 --> 00:00:10.544
في سطر واحد فقط من الكود
فإن البرنامج لا يعمل.

00:00:10.644 --> 00:00:13.413
وعند محاولة تشغيله تردكم رسالة خطأ.

00:00:13.514 --> 00:00:15.983
ولكن إن قمتم بتغيير الاسم
في جميع هذه الأسطر،

00:00:16.083 --> 00:00:17.584
فهو يعمل بشكل طبيعي.

00:00:17.684 --> 00:00:19.486
يمكننا أن نفهم سبب حدوث ذلك بشكل أفضل

00:00:19.586 --> 00:00:25.659
إن ألقينا نظرة عن كثب على هذا السطر:
george = turtle.Turtle()

00:00:25.759 --> 00:00:28.095
على المستوى العام،
يمكننا التفكير في هذا السطر

00:00:28.195 --> 00:00:32.366
على أنه إنشاء سلحفاة ومنحها اسماً.

00:00:32.466 --> 00:00:35.903
هذا الجزء على اليمين،
turtle.Turtle()

00:00:36.003 --> 00:00:38.038
هو الجزء الذي يخلق سلحفاة جديدة،

00:00:38.138 --> 00:00:42.609
وهذا الجزء على اليسار، "george"،
يحدد اسم السلحفاة.

00:00:42.709 --> 00:00:46.480
ولكن ماذا نقصد عندما نقول
إن هذا الكود ينشئ سلحفاة؟

00:00:46.580 --> 00:00:50.784
حسناً، لدى Python مجموعة من المعلومات
حول كيفية عمل السلاحف،

00:00:50.884 --> 00:00:56.123
أي كيف نجعل هذا الروبوت الافتراضي
يتحرك بطرق مختلفة ويرسم أشياء على الشاشة.

00:00:56.223 --> 00:00:59.126
حنى نتمكن من استخدام سلحفاة في برنامجنا،

00:00:59.226 --> 00:01:03.063
نحتاج أولاً إلى عمل نسخة عن بعض البيانات
المخزنة في ذاكرة الحاسوب.

00:01:03.163 --> 00:01:06.333
لذا، عندما نقوم بتشغيل هذا الكود،
turtle.Turtle()

00:01:06.433 --> 00:01:09.436
تجد لغة "بايثون" مساحة فارغة
في ذاكرة الحاسوب

00:01:09.536 --> 00:01:12.873
وتضع بيانات السلاحف هذه في تلك المساحة.

00:01:12.973 --> 00:01:15.809
ببساطة، نحن نجهز الساحة
حتى نتمكن من استخدام هذه البيانات

00:01:15.909 --> 00:01:18.712
كلما أردنا إلى أن تقوم السلحفاة برسم شيء.

00:01:18.812 --> 00:01:22.549
لدينا الآن البيانات التي نحتاج إليها
لهذه السلحفاة الآلية الافتراضية

00:01:22.649 --> 00:01:25.786
في هذا الموقع المحدد في ذاكرة الحاسوب.

00:01:25.886 --> 00:01:29.489
بالمناسبة، ستسمعوننا نشير إلى هذا
باسم كائن بيانات "turtle"

00:01:29.590 --> 00:01:32.526
أو مجرد كائن "turtle".

00:01:32.626 --> 00:01:35.562
إن أردنا أن نكون قادرين
على استخدام كائن turtle هذا،

00:01:35.662 --> 00:01:37.564
لا يمكننا وضع البيانات في الذاكرة فحسب،

00:01:37.664 --> 00:01:40.934
وإنما نحتاج أيضاً إلى طريقة
للحديث عن تلك السلحفاة،

00:01:41.034 --> 00:01:43.203
ولإعطائها تعليمات وخلافه.

00:01:43.303 --> 00:01:46.006
نحتاج إلى طريقة للإشارة إلى تلك السلحفاة.

00:01:46.106 --> 00:01:48.775
لهذا السبب نطلق عليها اسماً مثل "george".

00:01:48.876 --> 00:01:53.313
بمجرد إدخال كائن بيانات السلحفاة
في الذاكرة وإعطائه اسماً،

00:01:53.413 --> 00:01:57.317
يمكننا استخدام ذلك الاسم
كلما أردنا أن نفعل شيئاُ باستخدام السلحفاة.

00:01:57.417 --> 00:02:01.822
مثلاً، إن كنا نريد أن تتقدم السلحفاة
المسماة "george" أو تستدير

00:02:01.922 --> 00:02:05.859
يمكننا استخدام أسطر مثل:
george.forward(100)

00:02:05.959 --> 00:02:08.495
ومثل
george.right(90)

00:02:08.595 --> 00:02:12.399
إن قلنا أولاً إننا نشير إلى كائن البيانات
هذا على أنه "george"،

00:02:12.499 --> 00:02:17.704
ثم حاولنا لاحقاً الإشارة إليه باسم مختلف
مثل "amy"، فإنه لن يعمل.

00:02:17.804 --> 00:02:22.442
لم يربط الكود بين "amy"
وبين أي بيانات بعينها في الذاكرة.

00:02:22.543 --> 00:02:25.112
يمكننا استخدام أي اسم نريده تقريباً،

00:02:25.212 --> 00:02:30.584
ولكن يجب أن نكون متسقين وإلا لن
تعرف Python إلى أي بيانات نشير.

00:02:30.684 --> 00:02:35.589
هذا المفهوم ليس مجرد شيء
ينطبق على تسمية السلاحف فحسب.

00:02:35.689 --> 00:02:39.626
الفكرة العامة هنا هي أننا أدخلنا
بعض البيانات في ذاكرة الحاسوب

00:02:39.726 --> 00:02:43.964
ثم ربطنا تلك البيانات باسم
يمكننا استخدامه في تعليماتنا البرمجية.

00:02:44.064 --> 00:02:48.435
عندما يكون لدينا رابط ما بين اسم في الكود
وبعض البيانات في الذاكرة،

00:02:48.535 --> 00:02:52.439
هناك مصطلح محدد نستخدمه لهذا،
ألا وهو "متغير".

00:02:52.539 --> 00:02:56.677
سبب تسميتنا له بالمتغير
هو أن هذا الرابط قابل للتغيير.

00:02:56.777 --> 00:03:00.214
أي أنه يمكننا تغيير البيانات
التي يشير إليها المتغير.

00:03:00.314 --> 00:03:04.251
يمكننا أن نقول إن هذا المتغير يشير
إلى بعض البيانات في مكان ما في الذاكرة

00:03:04.351 --> 00:03:06.220
ولكن في وقت لاحق في برنامجنا يمكننا تغييره

00:03:06.320 --> 00:03:10.657
بحيث يشير المتغير إلى بيانات أخرى
في موقع مختلف في الذاكرة.

00:03:10.757 --> 00:03:14.561
المتغير هو أشبه بصندوق يحمل ملصقاً تعريفياً،

00:03:14.661 --> 00:03:17.998
يمكننا استخدام الملصق
للإشارة إلى ما يوجد داخل ذلك الصندوق.

00:03:18.098 --> 00:03:22.569
ولكن يمكننا لاحقاً إزالة الملصق
ووضعه على صندوق مختلف.

00:03:22.669 --> 00:03:27.207
لإخبار الكمبيوتر بأن كائن بيانات معين
ينبغي أن يحمل ملصق اسم معين،

00:03:27.307 --> 00:03:31.478
نستخدم سطوراً مثل:
george = turtle.Turtle()

00:03:31.578 --> 00:03:36.049
لاحظوا كيف ينقسم هذا السطر
إلى جزئين على طرفي علامة المساواة.

00:03:36.149 --> 00:03:38.819
على اليمين يوجد الكود:
turtle.Turtle()

00:03:38.919 --> 00:03:40.754
وهو ينشئ سلحفاة جديدة.

00:03:40.854 --> 00:03:45.526
وعلى اليسار يوجد "george"
وهو الاسم الذي نعطيه للمتغير.

00:03:45.626 --> 00:03:48.962
وفي الوسط توجد علامة المساواة
التي تقول لـ Python:

00:03:49.062 --> 00:03:53.066
خذ هذا الشيء على اليمين
واربطه بالاسم الموجود على اليسار.

00:03:53.166 --> 00:03:56.803
بالمناسبة، عندما نربط اسمًا
مع بعض البيانات في الذاكرة،

00:03:56.904 --> 00:03:59.873
نحن نشير إلى هذه العملية بالإسناد.

00:03:59.973 --> 00:04:04.278
نحن نقوم بإسناد البيانات من الكود الذي
على اليمين إلى الاسم الذي على اليسار.

00:04:04.378 --> 00:04:07.614
تسمى علامة المساواة عامل تشغيل الإسناد،

00:04:07.714 --> 00:04:12.085
ويمكننا الإشارة إلى سطر في الكود مثل:
george = turtle.Turtle()

00:04:12.186 --> 00:04:14.421
باسم عبارة إسناد.

00:04:14.521 --> 00:04:18.625
لاحظوا أن الأشياء الموجودة
على يمين عبارة الإسناد دائماً تحدث أولاً.

00:04:18.725 --> 00:04:24.231
أولاً، ننشئ سلحفاة جديدة
ثم نسند تلك السلحفاة للاسم "george".

